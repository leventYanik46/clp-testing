---
const auth0Config = {
  domain: import.meta.env.PUBLIC_AUTH0_DOMAIN,
  clientId: import.meta.env.PUBLIC_AUTH0_CLIENT_ID,
  redirectUri: import.meta.env.PUBLIC_AUTH0_REDIRECT_URI,
};
---

<script is:inline type="module" define:vars={{ auth0Config }}>
  import createAuth0Client from '@auth0/auth0-spa-js';

  const { domain, clientId, redirectUri } = auth0Config;

  if (!domain || !clientId) {
    console.warn('Auth0 configuration missing; skipped Auth0 initialization.');
  } else {
    const auth0Client = await createAuth0Client({
      domain,
      clientId,
      authorizationParams: {
        redirect_uri: redirectUri || window.location.origin,
      },
      cacheLocation: 'localstorage',
      useRefreshTokens: true,
    });

    try {
      const search = window.location.search;
      if (search.includes('code=') && search.includes('state=')) {
        await auth0Client.handleRedirectCallback();
        const cleanedUrl = window.location.origin + window.location.pathname + window.location.hash;
        window.history.replaceState({}, document.title, cleanedUrl);
      }
    } catch (error) {
      console.error('Auth0 redirect handling failed', error);
    }

    const helpers = {
      login(options) {
        return auth0Client.loginWithRedirect(options);
      },
      logout(options) {
        const defaultOptions = { logoutParams: { returnTo: window.location.origin } };
        return auth0Client.logout({ ...defaultOptions, ...options });
      },
      async isAuthenticated() {
        return auth0Client.isAuthenticated();
      },
      getUser(options) {
        return auth0Client.getUser(options);
      },
      getToken(options) {
        return auth0Client.getTokenSilently(options);
      },
      getClient() {
        return auth0Client;
      },
    };

    window.auth0Client = auth0Client;
    window.auth0 = helpers;
    document.dispatchEvent(new CustomEvent('auth0-ready', { detail: helpers }));
  }
</script>
